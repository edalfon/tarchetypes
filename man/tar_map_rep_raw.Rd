% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_map_rep_raw.R
\name{tar_map_rep_raw}
\alias{tar_map_rep_raw}
\title{Batched replication within static branches for data frames (raw version).}
\usage{
tar_map_rep_raw(
  name,
  command,
  values = NULL,
  names = NULL,
  columns = quote(tidyselect::everything()),
  batches = 1,
  reps = 1,
  combine = TRUE,
  tidy_eval = targets::tar_option_get("tidy_eval"),
  packages = targets::tar_option_get("packages"),
  library = targets::tar_option_get("library"),
  format = "feather",
  iteration = targets::tar_option_get("iteration"),
  error = targets::tar_option_get("error"),
  memory = targets::tar_option_get("memory"),
  deployment = targets::tar_option_get("deployment"),
  priority = targets::tar_option_get("priority"),
  resources = targets::tar_option_get("resources"),
  storage = targets::tar_option_get("storage"),
  retrieval = targets::tar_option_get("retrieval"),
  cue = targets::tar_option_get("cue")
)
}
\arguments{
\item{command}{Language object, R code for a single replicate. Must return
a data frame.}

\item{names}{Language object with a tidyselect expression
to select which columns of \code{values} to use to construct
statically branched target names. If \code{NULL}, then
short names are automatically generated.}

\item{columns}{Language object with a tidyselect expression
to select which columns of \code{values} to append to the output.}

\item{combine}{Logical of length 1, whether to statically combine
all the results into a single target downstream.}
}
\value{
A list of new target objects.
See the "Target objects" section for background.
}
\description{
Define targets for batched replication
within static branches for data frames (raw version).

This function is like \code{\link[=tar_map_rep]{tar_map_rep()}}
except the \code{name} argument is a character string
and the \code{names} and \code{columns} arguments are
language objects.
}
\section{Target objects}{

Most \code{tarchetypes} functions are target factories,
which means they return target objects
or lists of target objects.
Target objects represent skippable steps of the analysis pipeline
as described at \url{https://books.ropensci.org/targets/}.
Please read the walkthrough at
\url{https://books.ropensci.org/targets/walkthrough.html}
to understand the role of target objects in analysis pipelines.

For developers,
\url{https://wlandau.github.io/targetopia/contributing.html#target-factories}
explains target factories (functions like this one which generate targets)
and the design specification at
\url{https://books.ropensci.org/targets-design/}
details the structure and composition of target objects.


Most \code{tarchetypes} functions are target factories,
which means they return target objects
or lists of target objects.
Target objects represent skippable steps of the analysis pipeline
as described at \url{https://books.ropensci.org/targets/}.
Please read the walkthrough at
\url{https://books.ropensci.org/targets/walkthrough.html}
to understand the role of target objects in analysis pipelines.

For developers,
\url{https://wlandau.github.io/targetopia/contributing.html#target-factories}
explains target factories (functions like this one which generate targets)
and the design specification at
\url{https://books.ropensci.org/targets-design/}
details the structure and composition of target objects.
}

\examples{
if (identical(Sys.getenv("TAR_LONG_EXAMPLES"), "true")) {
targets::tar_dir({ # tar_dir() runs code from a temporary directory.
targets::tar_script({
  # Just a sketch of a Bayesian sensitivity analysis of hyperparameters:
  assess_hyperparameters <- function(sigma1, sigma2) {
    # data <- simulate_random_data() # user-defined function
    # run_model(data, sigma1, sigma2) # user-defined function
    # Mock output from the model:
    posterior_samples <- stats::rnorm(1000, 0, sigma1 + sigma2)
    tibble::tibble(
      posterior_median = median(posterior_samples),
      posterior_quantile_0.025 = quantile(posterior_samples, 0.025),
      posterior_quantile_0.975 = quantile(posterior_samples, 0.975)
    )
  }
  hyperparameters <- tibble::tibble(
    scenario = c("tight", "medium", "diffuse"),
    sigma1 = c(10, 50, 50),
    sigma2 = c(10, 5, 10)
  )
  tarchetypes::tar_map_rep_raw(
    sensitivity_analysis,
    command = quote(assess_hyperparameters(sigma1, sigma2)),
    values = hyperparameters,
    names = quote(tidyselect::any_of("scenario")),
    batches = 2,
    reps = 3
   )
})
targets::tar_make()
targets::tar_read(sensitivity_analysis)
})
}
}
\seealso{
Other branching: 
\code{\link{tar_combine_raw}()},
\code{\link{tar_combine}()},
\code{\link{tar_map_rep}()},
\code{\link{tar_map}()},
\code{\link{tar_rep_map_raw}()},
\code{\link{tar_rep_map}()},
\code{\link{tar_rep_raw}()},
\code{\link{tar_rep}()}
}
\concept{branching}
