% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_hook_outer.R
\name{tar_hook_outer}
\alias{tar_hook_outer}
\title{Hook to wrap commands}
\usage{
tar_hook_outer(targets, hook, names = NULL)
}
\arguments{
\item{targets}{A list of target objects.}

\item{hook}{R code to wrap each target's command.
The hook must contain the special placeholder symbol \code{.x}
so \code{tar_hook_outer()} knows where to insert the original command
of the target.
The hook code is quoted (not evaluated) so there is no need
to wrap it in \code{quote()}, \code{expression()}, or similar.}

\item{names}{Name of targets in the target list
to apply the hook. You can supply symbols, a character vector,
or tidyselect helpers like \code{\link[=starts_with]{starts_with()}}.
Targets not included in \code{names} still remain in the target list,
but they are not modified because the hook does not apply to them.}
}
\value{
\code{NULL} (invisibly). The target objects are modified in place.
}
\description{
Wrap the command of each target in an arbitrary R expression.
}
\details{
The expression you supply to \code{hook}
must contain the special placeholder symbol \code{.x}
so \code{tar_hook_outer()} knows where to insert the original command
of the target.
}
\section{Target objects}{

Most \code{tarchetypes} functions are target factories,
which means they return target objects
or lists of target objects.
Target objects represent skippable steps of the analysis pipeline
as described at \url{https://books.ropensci.org/targets/}.
Please read the walkthrough at
\url{https://books.ropensci.org/targets/walkthrough.html}
to understand the role of target objects in analysis pipelines.

For developers,
\url{https://wlandau.github.io/targetopia/contributing.html#target-factories}
explains target factories (functions like this one which generate targets)
and the design specification at
\url{https://books.ropensci.org/targets-design/}
details the structure and composition of target objects.
}

\examples{
if (identical(Sys.getenv("TAR_LONG_EXAMPLES"), "true")) {
targets::tar_dir({ # tar_dir() runs code from a temporary directory.
targets::tar_script({
  targets <- list(
    # Nested target lists work with hooks.
    list(
      targets::tar_target(x1, task1()),
      targets::tar_target(x2, task2(x1))
    ),
    targets::tar_target(x3, task3(x2)),
    targets::tar_target(y1, task4(x3))
  )
  # Modifies target objects in place and invisibly returns NULL:
  tarchetypes::tar_hook_outer(
    targets = targets,
    hook = postprocess(.x, arg = "value"),
    names = starts_with("x")
  )
  targets # Return the target list.
})
targets::tar_manifest(fields = command)
})
}
}
\seealso{
Other hooks: 
\code{\link{tar_hook_before}()},
\code{\link{tar_hook_inner}()}
}
\concept{hooks}
