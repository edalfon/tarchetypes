% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_hook_before.R
\name{tar_hook_before}
\alias{tar_hook_before}
\title{First hook}
\usage{
tar_hook_before(targets, hook, names = NULL)
}
\arguments{
\item{targets}{A list of target objects.}

\item{hook}{R code to insert. When you supply this argument,
this code is quoted (not evaluated) so there is no need
to wrap it in \code{quote()}, \code{expression()}, or similar.}

\item{names}{Name of targets in the target list
to apply the hook. You can supply symbols, a character vector,
or tidyselect helpers like \code{\link[=starts_with]{starts_with()}}.}
}
\value{
A list of target objects.
}
\description{
Prepend R code to the commands of multiple targets
}
\section{Target objects}{

Most \code{tarchetypes} functions are target factories,
which means they return target objects
or lists of target objects.
Target objects represent skippable steps of the analysis pipeline
as described at \url{https://books.ropensci.org/targets/}.
Please read the walkthrough at
\url{https://books.ropensci.org/targets/walkthrough.html}
to understand the role of target objects in analysis pipelines.

For developers,
\url{https://wlandau.github.io/targetopia/contributing.html#target-factories}
explains target factories (functions like this one which generate targets)
and the design specification at
\url{https://books.ropensci.org/targets-design/}
details the structure and composition of target objects.
}

\examples{
if (identical(Sys.getenv("TAR_LONG_EXAMPLES"), "true")) {
targets::tar_dir({ # tar_dir() runs code from a temporary directory.
targets::tar_script({
  targets <- list(
    # Nested target lists work with hooks.
    list(
      targets::tar_target(x1, task1()),
      targets::tar_target(x2, task2(x1))
    ),
    targets::tar_target(x3, task3(x2)),
    targets::tar_target(y1, task4(x3))
  )
  tarchetypes::tar_hook_before(
    targets = targets,
    hook = print("Running hook."),
    names = starts_with("x")
  )
})
targets::tar_manifest(fields = command)
})
}
}
\concept{hooks}
